- name: Check if Kubernetes is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_init_stat
- name: Initialize Kubernetes cluster
  command: >
    kubeadm init  --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ ansible_default_ipv4.address }}

  when: not k8s_init_stat.stat.exists
  register: kubeadm_init
- name: Create .kube directory for root
  file:
    path: /root/.kube
    state: directory
    mode: '0755'
- name: Copy admin.conf to root's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: true
    owner: root
    group: root
    mode: '0644'
- name: Create .kube directory for ubuntu user
  file:
    path: /home/ubuntu/.kube
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'
- name: Copy admin.conf to ubuntu's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/ubuntu/.kube/config
    remote_src: true
    owner: ubuntu
    group: ubuntu
    mode: '0644'
- name: Install Flannel CNI
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: kube-flannel
  when: not k8s_init_stat.stat.exists
- name: Apply Flannel configuration
  shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: not k8s_init_stat.stat.exists
- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command_raw
  when: not k8s_init_stat.stat.exists
- name: Set join command fact
  set_fact:
    join_command: "{{ join_command_raw.stdout }}"
  when: not k8s_init_stat.stat.exists
- name: Save join command to file
  copy:
    content: "{{ join_command }}"
    dest: /tmp/kubernetes-join-command
  when: not k8s_init_stat.stat.exists
  delegate_to: localhost
- name: Wait for all nodes to be ready
  shell: kubectl get nodes --no-headers | wc -l
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: node_count
  until: node_count.stdout|int >= groups['k8s_cluster']|length
  retries: 30
  delay: 10
